{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","this","focus","console","log","ref","inp","onChange","onKeyDown","type","onClick","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","delItem","splice","todo1","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById"],"mappings":"iOACuBA,Y,6CCGFC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAebC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAOC,SAA4B,KAAnBT,EAAEI,OAAOC,MAAc,EAAIL,EAAEI,OAAOC,UAflE,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBTC,KAAKH,EAAEI,QACPC,QAAQC,IAAIH,Q,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOI,IAAK,SAACC,GAAO,EAAKR,EAAEQ,GAAMZ,KAAK,IAAIa,SAAUN,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMC,EAAGU,UAAWP,KAAKhB,YAAawB,KAAK,SADlI,IAGI,2BAAOf,KAAK,IAAIa,SAAUN,KAAKT,aAAcD,MAAOU,KAAKJ,MAAME,EAAGS,UAAWP,KAAKhB,YAAawB,KAAK,SAHxG,IAKI,2BAAOf,KAAK,IAAIa,SAAUN,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMG,EAAGQ,UAAWP,KAAKhB,YAAawB,KAAK,SALxG,IAOI,2BAAIR,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,GAEzC,2BAAOK,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMG,KAAK,SACxC,4BAAQC,QAAW,WAAKP,QAAQC,IAAI,EAAKE,IAAIf,SAA7C,qB,GArCuBR,aCDlB4B,E,iLACP,IAAD,OACAC,EAAQX,KAAKb,MAAbwB,KACL,OACI,4BACIA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,wBAAIC,IAAKD,GAAMD,EAAf,MAAuB,4BAAQJ,QAAS,kBAAI,EAAKtB,MAAM6B,IAAIF,KAApC,yB,GALvBhC,aAerC4B,EAAQO,aAAe,CACnBN,KAAM,CAAC,EAAE,K,ICfQO,E,YACjB,aAAc,IAAD,uBACT,+CAwBJC,QAAU,SAACC,GAGP,EAAK5B,SAAS,CACVmB,KAAK,GAAD,mBAAK,EAAKf,MAAMe,MAAhB,CAAqBS,OA7BpB,EAgCbC,QAAU,SAACD,GAGP,IAAIT,EAAI,YAAO,EAAKf,MAAMe,MAC1BA,EAAKW,OAAOF,EAAK,GAEjB,EAAK5B,UAAS,SAACI,EAAMT,GAEjB,OADAe,QAAQC,IAAIP,EAAMe,MACX,CACHA,KAAMA,OAvCd,EAAKf,MAAQ,CACTe,KAAK,CAAC,EAAE,EAAE,GACVY,MAAM,CAAC,EAAE,EAAE,IAIf,IAAIC,EAAM,CAAC3B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAGpB2B,EAAIC,OAAOC,OAAOH,EAFX,CAACzB,EAAE,MATL,OAcTG,QAAQC,IAAIqB,GACZtB,QAAQC,IAAIsB,GACZvB,QAAQC,IAAIuB,OAAOE,KAAKJ,IACxBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAAChB,GACtBX,QAAQC,IAAIU,GACZX,QAAQC,IAAIqB,EAAIX,OAnBX,E,sEAqDT,OACI,6BACI,kBAAC,EAAD,CAAWzB,IAAKY,KAAKmB,UACrB,kBAAC,EAAD,CAASH,IAAKhB,KAAKqB,QAASV,KAAMX,KAAKJ,MAAMe,OAC7C,kBAAC,EAAD,CAASK,IAAKhB,KAAKqB,QAASV,KAAMX,KAAKJ,MAAM2B,a,GA1DvBzC,aCMtCgD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.5c4f1004.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\nclass ShowTime extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log('constructor');\r\n        setInterval(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            });\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\")\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n\r\n        console.log(\"componentDidUpdate\");\r\n        console.log(preProps,preState,data);\r\n        console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return{name:this.state.a};\r\n    }\r\n    render(){\r\n        var {name,age} = this.props;\r\n        return (<Fragment>\r\n                    {/*条件渲染 */}\r\n                    {name.length>5?<div>姓名:{name}</div>:''}\r\n                    {name.length>5?<div>姓名:{name}</div>:''}\r\n\r\n                    <div>{this.state.time}</div>\r\n                    \r\n                    {/*循环渲染*/}\r\n                    <div>\r\n                        {\r\n                            age.map((item,index)=>{\r\n                                if(index%2 === 0){\r\n                                    return <p key={item}>{item}</p>\r\n                                }\r\n                                \r\n                            })\r\n                        }\r\n                    </div> \r\n                </Fragment>)\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n\r\n\r\n\r\n//命名导出：可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime}\r\n","import React, { Component } from 'react'\r\n// 受控组件：value值被react控制的表单元素\r\n// 可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n// \r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        // 绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value === ''? 0 : e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.a.focus();\r\n        console.log(this)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/**非受控组件 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type='text'/>\r\n                <button onClick = {()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>{\r\n                todo.map((item,idx)=><li key={idx}>{item}---<button onClick={()=>this.props.del(idx)}>删除</button></li>)\r\n            }</ul>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array,\r\n    del: PropTypes.func\r\n} \r\nTodoing.defaultProps = {\r\n    todo: [1,21]\r\n} ","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            todo1:[4,5,6]\r\n\r\n        }\r\n        //深拷贝\\浅拷贝\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        var o = Object.assign(obj,obj1);\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        console.log(obj);\r\n        console.log(o);\r\n        console.log(Object.keys(obj));\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n\r\n\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (data)=>{\r\n        //1.不能直接改变或处理state，通过setState改变\r\n        // console.log(e);\r\n        let todo = [...this.state.todo];\r\n        todo.splice(data,1);\r\n        //2.setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo)\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        //在setState里获取state可能会出错，不是你想要的值\r\n        //可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num+100\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo1}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment,Component} from 'react';\nimport ShowTime from './ShowTime'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n\n// 组件交互\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件---->父组件：\n\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n\n// var num=[1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n//显示当前系统时间\n//变量都要用{}括起来\n/*\nfunction ShowTime(props){\n    console.log(props);\n    return (<Fragment>\n            <div>{props.name}</div>\n            <div>\n                {new Date().toLocaleString()}\n            </div></Fragment>)\n}\nvar num=20;\nReactDOM.render(\n    <ShowTime age={num} name=\"zhangsan\"/>,\n    document.getElementById('root')\n)\n*/\n\n/*\nfunction showTime(){\n    var ele = <div>\n        <p>当前时间是：</p>\n        <div>\n            {new Date().toLocaleString()}\n        </div>\n    </div>;\n    ReactDOM.render(ele,\n        document.querySelector('#root')\n    );\n}\nshowTime();\nsetInterval(showTime,1000);\n*/\n\n/*\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片fragment\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(ele);\n}\nrender(obj,document.getElementById('root'));\n*/\n\n\n\n//页面渲染过程\n//请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n//link引入css文件、css解析器解析css，生成css对象模型,CSSOM和DOM tree结合生成一个render tree,最后浏览器绘制页面\n\n//页面回流(重排reflow)引起的原因:DOM结构变化、内容变化、大小、位置的变化\n//页面重绘(repaint)引起的原因:颜色的变化(背景色、字体颜色、边框颜色)\n\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n\n/*\n//1.先用变量进行dom处理，最后一次渲染。\nconsole.time('time');\nvar div = document.getElementById('root');\nvar str = '';\nfor(var i=0;i<1000;i++){\n    str += '<p>'+i+'</p>';\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n\n/*\n//2.对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width='200px';\n// div.style.height='100px';\n// div.style.background='red';//这种写法至少回流两次\n\n//css类：\n// .active{\n//     width='200px';\n//     height='100px';\n//     background='red';\n// }\ndiv.className = 'active';\n*/\n\n/*\n//3.offsetLeft、offsetWidth等都会引起回流\nconsole.log(div.offsetLeft);\nvar wid = div.offsetWidth;\nsetInterval(()=>{\n    wid += 1;\n    div.style.width = wid + 'px';\n},1000)\n*/\n\n\n//4.文档碎片"],"sourceRoot":""}